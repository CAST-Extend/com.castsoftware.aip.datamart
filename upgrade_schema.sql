set search_path to :schema;
DO $$ 
    BEGIN
        BEGIN 
            ALTER TABLE DIM_SNAPSHOTS ADD COLUMN VERSION TEXT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column VERSION already exists for DIM_SNAPSHOTS';
        END;

        BEGIN 
            ALTER TABLE DIM_SNAPSHOTS ADD COLUMN CONSOLIDATION_MODE TEXT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column CONSOLIDATION_MODE already exists for DIM_SNAPSHOTS';
        END;

        BEGIN 
            ALTER TABLE DIM_SNAPSHOTS ADD COLUMN INTERNAL_ID INT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column INTERNAL_ID already exists for DIM_SNAPSHOTS';
        END;

        BEGIN 
            ALTER TABLE SRC_HEALTH_IMPACTS ADD COLUMN SNAPSHOT_ID TEXT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column SNAPSHOT_ID already exists for SRC_HEALTH_IMPACTS';
        END;

        BEGIN 

        ALTER TABLE SRC_HEALTH_IMPACTS ADD COLUMN NB_VIOLATIONS INT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column NB_VIOLATIONS already exists for SRC_HEALTH_IMPACTS';
        END;

        BEGIN 
            ALTER TABLE SRC_HEALTH_IMPACTS ADD COLUMN NB_VIOLATED_RULES INT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'column NB_VIOLATED_RULES already exists for SRC_HEALTH_IMPACTS';
        END;
        
        BEGIN 
            CREATE TABLE SRC_TRX_HEALTH_IMPACTS
            (
                APPLICATION_NAME TEXT,
                SNAPSHOT_ID TEXT,
                TRX_ID  TEXT,
                TRX_NAME TEXT,
                SECURITY_RISK_INDEX INT,
                EFFICIENCY_RISK_INDEX INT,
                ROBUSTNESS_RISK_INDEX INT,
                CONSTRAINT SRC_TRX_HEALTH_IMPACTS_PKEY PRIMARY KEY (SNAPSHOT_ID, TRX_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table SRC_TRX_HEALTH_IMPACTS already exists';
        END;
        
        BEGIN 
            CREATE TABLE DIM_OMG_RULES
            (
                RULE_ID TEXT,
                RULE_NAME TEXT,
                TECHNICAL_CRITERION_NAME TEXT,  
                IS_CRITICAL BOOLEAN,
                WEIGHT NUMERIC,
                WEIGHT_OMG_MAINTAINABILITY NUMERIC,
                WEIGHT_OMG_EFFICIENCY NUMERIC,
                WEIGHT_OMG_RELIABILITY NUMERIC,
                WEIGHT_OMG_SECURITY NUMERIC,
                WEIGHT_OMG_INDEX NUMERIC,
                CONSTRAINT DIM_OMG_RULES_PKEY PRIMARY KEY (RULE_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table DIM_OMG_RULES already exists';
        END;
        
        BEGIN 
            CREATE TABLE DIM_CISQ_RULES
            (
                RULE_ID TEXT,
                RULE_NAME TEXT,
                TECHNICAL_CRITERION_NAME TEXT,  
                IS_CRITICAL BOOLEAN,
                WEIGHT NUMERIC,
                WEIGHT_CISQ_MAINTAINABILITY NUMERIC,
                WEIGHT_CISQ_EFFICIENCY NUMERIC,
                WEIGHT_CISQ_RELIABILITY NUMERIC,
                WEIGHT_CISQ_SECURITY NUMERIC,
                WEIGHT_CISQ_INDEX NUMERIC,
                CONSTRAINT DIM_CISQ_RULES_PKEY PRIMARY KEY (RULE_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table DIM_CISQ_RULES already exists';
        END;        

        BEGIN 
            CREATE TABLE APP_VIOLATIONS_EVOLUTION
            (
                SNAPSHOT_ID TEXT,
                PREVIOUS_SNAPSHOT_ID TEXT,                
                RULE_ID TEXT,
                TECHNOLOGY TEXT,  
                METRIC_ID INT,
                NB_VIOLATIONS_ADDED INT,
                NB_VIOLATIONS_REMOVED INT,
                CONSTRAINT APP_VIOLATIONS_EVOLUTION_PKEY PRIMARY KEY (SNAPSHOT_ID, RULE_ID, TECHNOLOGY),
                FOREIGN KEY (RULE_ID) REFERENCES DIM_RULES (RULE_ID),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table APP_VIOLATIONS_EVOLUTION already exists';
        END;        
        
        BEGIN 
            CREATE TABLE MOD_VIOLATIONS_EVOLUTION
            (
                SNAPSHOT_ID TEXT,
                PREVIOUS_SNAPSHOT_ID TEXT,
                MODULE_NAME TEXT,    
                RULE_ID TEXT,
                TECHNOLOGY TEXT,  
                METRIC_ID INT,
                NB_VIOLATIONS_ADDED INT,
                NB_VIOLATIONS_REMOVED INT,
                CONSTRAINT MOD_VIOLATIONS_EVOLUTION_PKEY PRIMARY KEY (SNAPSHOT_ID, MODULE_NAME, RULE_ID, TECHNOLOGY),
                FOREIGN KEY (RULE_ID) REFERENCES DIM_RULES (RULE_ID),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table MOD_VIOLATIONS_EVOLUTION already exists';
        END;
        
        BEGIN 
            CREATE TABLE APP_TECHNO_SIZING_MEASURES
            (
                SNAPSHOT_ID TEXT,
                TECHNOLOGY TEXT,
                NB_ARTIFACTS INT,
                NB_CODE_LINES INT,
                NB_COMMENT_LINES INT,
                NB_COMMENTED_OUT_CODE_LINES INT,
                NB_CRITICAL_VIOLATIONS INT,
                NB_DECISION_POINTS INT,
                NB_FILES INT,
                NB_TABLES INT,
                NB_VIOLATIONS INT,
                NB_VIOLATIONS_EXCLUDED INT,    
                NB_VIOLATIONS_FIXED_ACTION_PLAN INT,
                NB_VIOLATIONS_PENDING_ACTION_PLAN INT,        
                TECHNICAL_DEBT_DENSITY NUMERIC,
                TECHNICAL_DEBT_TOTAL NUMERIC,
                CONSTRAINT APP_TECHNO_SIZING_MEASURES_PKEY PRIMARY KEY (SNAPSHOT_ID, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table APP_TECHNO_SIZING_MEASURES already exists';
        END;
    
        BEGIN 
            CREATE TABLE MOD_TECHNO_SIZING_MEASURES
            (
                SNAPSHOT_ID TEXT,
                MODULE_NAME TEXT,
                TECHNOLOGY TEXT,
                NB_ARTIFACTS INT,
                NB_CODE_LINES INT,
                NB_COMMENT_LINES INT,
                NB_COMMENTED_OUT_CODE_LINES INT,
                NB_CRITICAL_VIOLATIONS INT,
                NB_DECISION_POINTS INT,
                NB_FILES INT,
                NB_TABLES INT,
                NB_VIOLATIONS INT,
                TECHNICAL_DEBT_DENSITY NUMERIC,
                TECHNICAL_DEBT_TOTAL NUMERIC,
                CONSTRAINT MOD_TECHNO_SIZING_MEASURES_PKEY PRIMARY KEY (SNAPSHOT_ID, MODULE_NAME, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table MOD_TECHNO_SIZING_MEASURES already exists';
        END;
        
        BEGIN 
            CREATE TABLE APP_TECHNO_SCORES
            (
                SNAPSHOT_ID TEXT,
                TECHNOLOGY TEXT,
                METRIC_ID INT,
                METRIC_NAME TEXT,
                METRIC_TYPE TEXT,
                SCORE DECIMAL,
                CONSTRAINT APP_TECHNO_SCORES_PKEY PRIMARY KEY (SNAPSHOT_ID, METRIC_ID, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table APP_TECHNO_SCORES already exists';
        END;

        BEGIN 
            CREATE TABLE MOD_TECHNO_SCORES
            (
                SNAPSHOT_ID TEXT,
                MODULE_NAME TEXT,
                TECHNOLOGY TEXT,
                METRIC_ID INT,
                METRIC_NAME TEXT,
                METRIC_TYPE TEXT,
                SCORE DECIMAL,
                CONSTRAINT MOD_TECHNO_SCORES_PKEY PRIMARY KEY (SNAPSHOT_ID, MODULE_NAME, METRIC_ID, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table MOD_TECHNO_SCORES already exists';
        END;

        BEGIN 
            CREATE TABLE APP_TECHNO_SIZING_EVOLUTION
            (
                SNAPSHOT_ID TEXT,
                PREVIOUS_SNAPSHOT_ID TEXT,
                TECHNOLOGY TEXT,
                NB_CRITICAL_VIOLATIONS_ADDED INT,
                NB_CRITICAL_VIOLATIONS_REMOVED INT,
                NB_VIOLATIONS_ADDED INT,
                NB_VIOLATIONS_REMOVED INT,
                TECHNICAL_DEBT_ADDED NUMERIC,
                TECHNICAL_DEBT_DELETED NUMERIC,
                CONSTRAINT APP_TECHNO_SIZING_EVOLUTION_PKEY PRIMARY KEY (SNAPSHOT_ID, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID),
                FOREIGN KEY (PREVIOUS_SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table APP_TECHNO_SIZING_EVOLUTION already exists';
        END;
        
        BEGIN 
            CREATE TABLE MOD_TECHNO_SIZING_EVOLUTION
            (
                SNAPSHOT_ID TEXT,
                PREVIOUS_SNAPSHOT_ID TEXT,
                MODULE_NAME TEXT,
                TECHNOLOGY TEXT,
                NB_CRITICAL_VIOLATIONS_ADDED INT,
                NB_CRITICAL_VIOLATIONS_REMOVED INT,
                NB_VIOLATIONS_ADDED INT,
                NB_VIOLATIONS_REMOVED INT,
                TECHNICAL_DEBT_ADDED NUMERIC,
                TECHNICAL_DEBT_DELETED NUMERIC,
                CONSTRAINT MOD_TECHNO_SIZING_EVOLUTION_PKEY PRIMARY KEY (SNAPSHOT_ID, MODULE_NAME, TECHNOLOGY),
                FOREIGN KEY (SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID),
                FOREIGN KEY (PREVIOUS_SNAPSHOT_ID) REFERENCES DIM_SNAPSHOTS(SNAPSHOT_ID)
            );
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Table MOD_TECHNO_SIZING_EVOLUTION already exists';
        END;

        BEGIN 
            ALTER TABLE DIM_RULES ADD COLUMN BUSINESS_CRITERION_ID INT;
            ALTER TABLE DIM_RULES ADD COLUMN BUSINESS_CRITERION_NAME TEXT;
            ALTER TABLE DIM_RULES ADD COLUMN TECHNICAL_CRITERION_WEIGHT NUMERIC;
            ALTER TABLE DIM_RULES ADD COLUMN TECHNICAL_CRITERION_ID INT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'columns BUSINESS_CRITERION_ID, BUSINESS_CRITERION_NAME, TECHNICAL_CRITERION_WEIGHT, TECHNICAL_CRITERION_ID already exist for DIM_RULES';
        END;

        BEGIN 
            ALTER TABLE USR_ACTION_PLAN ADD COLUMN METRIC_ID INT;
            ALTER TABLE USR_ACTION_PLAN ADD COLUMN OBJECT_FULL_NAME TEXT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'columns METRIC_ID, OBJECT_FULL_NAME already exist for USR_ACTION_PLAN';
        END;

        BEGIN 
            ALTER TABLE USR_EXCLUSIONS ADD COLUMN METRIC_ID INT;
            ALTER TABLE USR_EXCLUSIONS ADD COLUMN OBJECT_FULL_NAME TEXT;
            ALTER TABLE USR_EXCLUSIONS ADD COLUMN LAST_UPDATE_DATE DATE;
            ALTER TABLE USR_EXCLUSIONS ADD COLUMN EXCLUSION_DATE DATE;
            ALTER TABLE USR_EXCLUSIONS ADD COLUMN EXCLUSION_SNAPSHOT_ID TEXT;           
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'columns METRIC_ID, OBJECT_FULL_NAME, LAST_UPDATE_DATE, EXCLUSION_DATE, EXCLUSION_SNAPSHOT_ID already exist for USR_EXCLUSIONS';
        END;
        
        BEGIN 
            CREATE TABLE APP_FINDINGS_MEASURES
            (
                SNAPSHOT_ID TEXT,
                TECHNOLOGY TEXT,
                RULE_ID TEXT,
                METRIC_ID INT,
                RULE_NAME TEXT,
                FINDING_TYPE TEXT,
                NB_FINDINGS INT,
                CONSTRAINT APP_FINDINGS_MEASURES_PKEY PRIMARY KEY (SNAPSHOT_ID, RULE_ID, TECHNOLOGY)
            );
        EXCEPTION
            WHEN OTHERS THEN             
                RAISE NOTICE 'Table APP_FINDINGS_MEASURES already exists';
        END;

        BEGIN 
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_VERY_HIGH INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_HIGH INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_MEDIUM INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_LOW INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_VERY_HIGH INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_HIGH INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_MEDIUM INT;
            ALTER TABLE APP_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_LOW INT;

            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_VERY_HIGH INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_HIGH INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_MEDIUM INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_LOW INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_VERY_HIGH INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_HIGH INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_MEDIUM INT;
            ALTER TABLE APP_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_LOW INT;

            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_VERY_HIGH INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_HIGH INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_MEDIUM INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_LOW INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_VERY_HIGH INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_HIGH INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_MEDIUM INT;
            ALTER TABLE MOD_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_LOW INT;

            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_VERY_HIGH INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_HIGH INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_MEDIUM INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_COMPLEXITY_LOW INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_VERY_HIGH INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_HIGH INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_MEDIUM INT;
            ALTER TABLE MOD_TECHNO_SIZING_MEASURES ADD COLUMN NB_CYCLOMATIC_LOW INT;        
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'Columns NB_COMPLEXITY_*, NB_CYCLOMATIC_* already exist for *_SIZING_MEASURES tables';
        END;

        BEGIN 
            ALTER TABLE APP_HEALTH_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
            ALTER TABLE APP_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
            ALTER TABLE APP_TECHNO_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
            ALTER TABLE MOD_HEALTH_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
            ALTER TABLE MOD_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
            ALTER TABLE MOD_TECHNO_SCORES ADD COLUMN COMPLIANCE_SCORE DECIMAL;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'Column COMPLIANCE_SCORE already exists fo XXX_YYY_SCORES tables';
        END;
        
        BEGIN 
            ALTER TABLE APP_HEALTH_SCORES ADD COLUMN REMEDIATION_EFFORT INT;
            ALTER TABLE MOD_HEALTH_SCORES ADD COLUMN REMEDIATION_EFFORT INT;
            ALTER TABLE APP_HEALTH_EVOLUTION ADD COLUMN REMEDIATION_EFFORT_ADDED INT;
            ALTER TABLE APP_HEALTH_EVOLUTION ADD COLUMN REMEDIATION_EFFORT_DELETED INT;
            ALTER TABLE MOD_HEALTH_EVOLUTION ADD COLUMN REMEDIATION_EFFORT_ADDED INT;
            ALTER TABLE MOD_HEALTH_EVOLUTION ADD COLUMN REMEDIATION_EFFORT_DELETED INT;
        EXCEPTION
            WHEN OTHERS THEN 
                RAISE NOTICE 'Columns REMEDIATION_EFFORT, REMEDIATION_EFFORT_ADDED, REMEDIATION_EFFORT_ADDED already exist fo XXX_HEALTH_YYY tables';
        END;
        
    END;
$$
